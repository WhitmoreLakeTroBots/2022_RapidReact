// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;

import javax.swing.plaf.basic.BasicComboPopup.InvocationKeyHandler;

import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandBase;
import edu.wpi.first.wpilibj2.command.ScheduleCommand;
import frc.robot.Robot;
import frc.robot.RobotContainer;
import frc.robot.Constants.ControllerConstants;
import frc.robot.subsystems.SubLauncher;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj2.command.ParallelCommandGroup;
import frc.robot.BillController;

public class CmdRemapController extends CommandBase {

    private boolean bDone = true;

    private BillController xboxCon;
    //**Xbox buttons  */
    

    private ControllerConstants.RobotMode CurrentMode;


    public CmdRemapController(ControllerConstants.RobotMode RunMode, BillController newController) {
        CurrentMode = RunMode;

        //xboxCon = newController;
        //xboxCon =  RobotContainer.getInstance().Xbox;
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        System.err.println("Remap Controller");

        switch(CurrentMode){
            case Intake:
            System.err.println("Remap Controller Intake");
            RobotContainer.getInstance().Xbox.dPad.up.whenPressed(new CmdMoveExtender());
            RobotContainer.getInstance().Xbox.dPad.down.whenPressed(new CmdMoveExtender(0));
            break;

            case Carry:
            System.err.println("Remap Controller - Carry");
            break;

            case Launching:
            System.err.println("Remap Controller - Launching");
            xboxCon.dPad.up.whenPressed(new CmdLauncherRun(2750.0));
            xboxCon.dPad.down.whenPressed(new CmdLauncherStop());

            break;

            case Climb:
            System.err.println("Remap Controller - Climb");

            break;

            default:

            System.err.println("RobotController - Default Error");


        }

    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {

    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return true;
    }

    @Override
    public boolean runsWhenDisabled() {

        return false;

    }
}
