// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.CommonLogic;
import frc.robot.RobotContainer;
import frc.robot.Constants.*;
import frc.robot.hardware.WL_Spark;
import com.revrobotics.SparkMaxPIDController;
import frc.robot.PID;
//import frc.robot.commands.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class SubIndexer extends SubsystemBase {
    //****** Cfeate constants */
    
    //define object for TrackMotor 

    //define object for feeder 

    //define double constant for feederCollectionPower

    //define double constant for FeederLaunchPower note this should be reverse of collection power

    //define double constant for track power



    public SubIndexer() {
  //**** set constants   */

    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    public void starttrack() {
        //start Track motor at TrackPower
    }

    
    public void stopTrack() {
        //stop track motor
    }

    public void FeederHolding(){
        //run Launch motor backwork at feederCollectionPower

    }

    public void FeederLaunch(){
        //run Feeder forward for a short duration


        //****need to sort this logic  either postion count or time count */

    } 

    public void FeederStop(){
        //stop Feeder

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

}
