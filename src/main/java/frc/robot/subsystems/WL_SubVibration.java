// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.BillController;
import frc.robot.CommonLogic;
import frc.robot.RobotContainer;
import frc.robot.Constants.*;
import frc.robot.hardware.WL_Spark;

import java.lang.System.Logger.Level;
import java.time.Duration;
import java.util.concurrent.locks.Condition;

import com.revrobotics.SparkMaxPIDController;
import frc.robot.PID;
import frc.robot.Robot;
import frc.robot.BillController;
import frc.robot.RobotMath;
import frc.robot.BillController.HAND;
//import frc.robot.commands.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class WL_SubVibration extends SubsystemBase {
    // Add Constants here.....

    // we need to think of some patterns for vibration execution.
    // I'm thinking we setup low / medium / high strenght
    // Also thinking durations short / Med / Long
    // and Side for patterns. Billcontroller.hand.left or .right

    private static double lowIntensity = 0.3;
    private static double MedIntensity = 0.5;
    private static double HighIntensity = 0.8;

    private static double ShortDuration = 0.2; // sec
    private static double MediumDuration = 0.4;
    private static double LongDuration = 0.6;

    private VibType vType;

    public WL_SubVibration() {
        // Initialize constants here

        //StartTime = RobotMath.getTime();

    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

        RunVibration();

    }

    public void start() {
        // Start hardware here
    }

    public void stop() {
        // stop hardware here
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    private void ExecVib(BillController.HAND VHand, double Intensity, double EndTime) {

        if (RobotMath.getTime() <= EndTime) {

            RobotContainer.getInstance().Xbox.setRumble(VHand, Intensity);
        }
    }

    public double CalcEndtime(double ActDuration) {
        return RobotMath.getTime() + ActDuration;
    }

    public void SetVib(VibType VMode) {
        vType = VMode;
    }

    private void RunVibration() {

        switch (vType) {

            case STOP:
                // StopVib
                ExecVib(HAND.LEFT, 0.0, CalcEndtime(0));
                ExecVib(HAND.RIGHT, 0.0, CalcEndtime(0));
                break;

            case TargetSeen:
                // vib target sean
                // lowIntensity, LongDuration LeftSide;
                ExecVib(HAND.LEFT, lowIntensity, CalcEndtime(LongDuration));
                break;

            case TargetLock:
                // vib target lock
                // medIntensity, MedDuration RightSide
                ExecVib(HAND.RIGHT, MedIntensity, CalcEndtime(MediumDuration));
                break;

            case LauncherAutoSpeed:
                // vib speed audo
                // HighIntensity, ShortDuration, LeftSide
                ExecVib(HAND.LEFT, HighIntensity, CalcEndtime(ShortDuration));
                break;

            case LauncherFixedSpeed:
                // vib speed fixed
                // MedIntensity, MedDuration, LeftSide
                ExecVib(HAND.LEFT, MedIntensity, CalcEndtime(MediumDuration));
                break;

            case LauncherSpeedSet:

                // vib speed set
                // MedIntensity, MedDuration, RightSide
                ExecVib(HAND.RIGHT, MedIntensity, CalcEndtime(MediumDuration));
                break;

        }
    }

    public enum VibType {
        STOP,
        TargetSeen,
        TargetLock,
        LauncherFixedSpeed,
        LauncherAutoSpeed,
        LauncherSpeedSet;
    }

}
