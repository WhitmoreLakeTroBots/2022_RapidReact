// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.Constants.*;
import frc.robot.hardware.WL_Spark;
import com.revrobotics.SparkMaxPIDController;

//import frc.robot.commands.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class SubLauncher extends SubsystemBase {
    public double kP, kI, kD, kIz, kFF, kMaxOutput, kMinOutput, maxRPM, maxVel, minVEL, maxACC;

    private int iTargetRPM = 0;
    private final int kTargetRPM = 3000;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WL_Spark CanSpark_launcher_lead;
    private SparkMaxPIDController pid;
    /**
    *
    */
    public SubLauncher() {
        kP = 7e-5;
        kI = 3e-7;
        kD = 0;
        kIz = 0;
        kFF = 0;
        kMaxOutput = 1;
        kMinOutput = -1;
        maxRPM = 5000;

        maxVel = 5000;
        maxACC = 3000;



        CanSpark_launcher_lead = new WL_Spark(CAN_ID_Constants.kCanID_Launcher_1,
                WL_Spark.MotorType.kBrushless);
        // CanSpark_launcher_follower = new
        // WL_Spark(Constants.CAN_ID_Constants.kCanID_launcher_2,CANSparkMax.MotorType.kBrushless);

        // Incase we have swapped one that has an inverted or current limit set in
        // memory
        CanSpark_launcher_lead.restoreFactoryDefaults();
        // CanSpark_launcher_follower.restoreFactoryDefaults();

        CanSpark_launcher_lead.setInverted(false);
        // CanSpark_launcher_follower.setInverted(true);

        CanSpark_launcher_lead.setSmartCurrentLimit(30);
        // CanSpark_launcher_follower.setSmartCurrentLimit(30);

        CanSpark_launcher_lead.setIdleMode(WL_Spark.IdleMode.kCoast);
        // CanSpark_launcher_follower.setIdleMode(CANSparkMax.IdleMode.kCoast);

        // CanSpark_launcher_follower.follow(CanSpark_launcher_lead);

        pid = CanSpark_launcher_lead.getPIDController();

        pid.setP(kP);
        pid.setI(kI);
        pid.setD(kD);
        pid.setFF(kFF);
        pid.setOutputRange(kMinOutput, kMaxOutput);

    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    public void start() {
        this.setTargetRPM(kTargetRPM);
    }

    public void setTargetRPM(int newTargetRPM) {
        iTargetRPM = newTargetRPM;
        pid.setReference(iTargetRPM, WL_Spark.ControlType.kSmartVelocity);
    }

    // Stop the flywheel
    public void stop() {
        CanSpark_launcher_lead.set(0);
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }
}
